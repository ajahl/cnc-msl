#include "Plans/Standards/Opponent/FreeKick/constraints/OppFreeKick1445411471122Constraints.h"
using namespace std;
using namespace alica;
/*PROTECTED REGION ID(ch1445411471122) ENABLED START*/
//Add additional using directives here
#include <memory>
#include "AutoDiff.h"
#include "MSLConstraintBuilder.h"
#include "engine/constraintmodul/SolverTerm.h"
#include "engine/constraintmodul/ConstraintDescriptor.h"
/*PROTECTED REGION END*/

namespace alicaAutogenerated
{
    //Plan:OppFreeKick

    /*		
     * Tasks: 
     * - EP:1445411471124 : DefaultTask (1225112227903)
     *
     * States:
     * - PosDef (1445411471123)
     *
     * Vars:
     */

    /*
     * RuntimeCondition - (Name): NewRuntimeCondition
     * (ConditionString): 
     * Static Variables: []
     * Domain Variables:

     * forall agents in PosDef let v = [x, y] 

     */
    void Constraint1445442215438::getConstraint(shared_ptr<ConstraintDescriptor> c, shared_ptr<RunningPlan> rp)
    {
        /*PROTECTED REGION ID(cc1445442215438) ENABLED START*/
    	auto constraint = autodiff::LTConstraint::TRUE;
//    	shared_ptr<vector<shared_ptr<vector<shared_ptr<vector<shared_ptr<SolverVariable>>>>>>> domainVariables = make_shared<vector<shared_ptr<vector<shared_ptr<vector<shared_ptr<SolverVariable>>>>>>>();
    	auto domainVariables = c->getDomainVars();
    	vector<shared_ptr<TVec>> poses;
    	for (int i = 0; i << domainVariables->at(0)->size(); i++)
    	{
    		//vector<shared_ptr<SolverTerm>> vec;
//    		shared_ptr<autodiff::Variable> sp_x = make_shared<autodiff::Variable>();
//    		shared_ptr<autodiff::Variable> sp_y = make_shared<autodiff::Variable>();
    		//vec.push_back(sp_x);
    		//vec.push_back(sp_y);

    		poses.push_back(make_shared<TVec>(initializer_list<shared_ptr<Term>>{dynamic_pointer_cast<autodiff::Variable>(domainVariables->at(0)->at(i)->at(0)), dynamic_pointer_cast<autodiff::Variable>(domainVariables->at(0)->at(i)->at(1))}));

    		constraint = constraint & msl::MSLConstraintBuilder::insideArea(msl::Areas::OwnPenaltyArea, poses.at(i));
//    		domainVariables->at(0)->at(i)->push_back(sp_x);
//    		domainVariables->at(0)->at(i)->push_back(sp_y);
    	}

    	c->setDomainVars(domainVariables);
        /*PROTECTED REGION END*/
    }

// State: PosDef

// State: PosDef

}
