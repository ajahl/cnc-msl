#include "Plans/Standards/Own/GoalKick/constraints/GoalKick1469521732930Constraints.h"
using namespace std;
using namespace alica;
/*PROTECTED REGION ID(ch1469521732930) ENABLED START*/
//Add additional using directives here
/*PROTECTED REGION END*/

namespace alicaAutogenerated
{
    //Plan:GoalKick

    /*		
     * Tasks: 
     * - EP:1469521732932 : ExecuteStandard (1439997010902)
     * - EP:1469522042827 : ReceiveStandard (1439997023446)
     * - EP:1469522045842 : AlternativeReceive (1462360858945)
     * - EP:1469522047745 : Block (1461237765109)
     *
     * States:
     * - AlignExec (1469521732931)
     * - Block (1469522259560)
     * - GrabBall (1469522367640)
     * - Pass (1469522370067)
     * - Stop (1469522371971)
     * - AlignRec (1469522490708)
     * - Receive (1469522492956)
     * - AlignRecAlternative (1469522494669)
     * - ReceiveAlternative (1469522496824)
     * - Success (1469522586732)
     * - SuccessAlternative (1469522588381)
     *
     * Vars:
     */

    /*
     * RuntimeCondition - (Name): NewRuntimeCondition
     * (ConditionString): 
     * Static Variables: []
     * Domain Variables:

     * forall agents in Block let v = [x, y] 

     */
    void Constraint1469522753378::getConstraint(shared_ptr<ConstraintDescriptor> c, shared_ptr<RunningPlan> rp)
    {
        /*PROTECTED REGION ID(cc1469522753378) ENABLED START*/
        /*PROTECTED REGION END*/
    }

// State: AlignExec

// State: AlignExec

// State: Block

// State: Block

// State: GrabBall

// State: GrabBall

// State: Pass

// State: Pass

// State: Stop

// State: Stop

// State: AlignRec

// State: AlignRec

// State: Receive

// State: Receive

// State: AlignRecAlternative

// State: AlignRecAlternative

// State: ReceiveAlternative

// State: ReceiveAlternative

// State: Success

// State: Success

// State: SuccessAlternative

// State: SuccessAlternative

}
